package com.drpicox.game.plant;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import com.drpicox.game.util.TestUtils;

// !!! IMPORTANT !!!
// This test file is AUTOGENERATED by yarn create-tests
// If you need to update it, run yarn create-tests
// DO NOT MODIFY manually. Keep running yarn create-tests instead,
// while editing your posts.

@ActiveProfiles("test")
@SpringBootTest
@AutoConfigureMockMvc
public class Post_20221020_PearTree_Test {

    @Autowired Post_20221020_PearTree_Context context;
    @Autowired TestUtils testUtils;

    @Test public void testPost() throws Throwable {
        testUtils.runBeforeTestStarts("2022-10-20_pear_tree", "108aecfae3f20120523e146cf98d0478");
        context.beforeTest();

        // # Pear Tree                                                                                                  // # Pear Tree
        // ### How to obtain Pears from a Pear Tree                                                                     // ### How to obtain Pears from a Pear Tree
        context.givenANewGame();                                                                                        // * Given a new game.
        context.givenThereIsTheSIdea("Harvest Idea");                                                                   // * Given there is the "Harvest Idea" idea.
        context.givenThereAreNSCards(1, "Pear");                                                                        // * Given there are 1 "Pear" cards.
        context.givenThereAreNStacksOfNSNSAndNSCards(1, 1, "Harvest Idea", 1, "Villager", 1, "Pear Tree");              // * Given there are 1 stacks of 1 "Harvest Idea", 1 "Villager", and 1 "Pear Tree" cards.
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.thereShouldBeNStacksOfNSNSNSAndNSCards(1, 1, "Harvest Idea", 1, "Villager", 1, "Pear Tree", 2, "Pear"); // * There should be 1 stacks of 1 "Harvest Idea", 1 "Villager", 1 "Pear Tree", and 2 "Pear" cards.
        context.theSCardDescriptionShouldSaySIsS("Pear Tree", "Fruit", "Pear");                                         // * The "Pear Tree" card description should say "Fruit" is "Pear".
        // ### How to obtain the Pear Tree                                                                              // ### How to obtain the Pear Tree
        context.givenANewGame();                                                                                        // * Given a new game.
        context.givenThereIsTheSIdeaAtLevelNAndNXp("Seed Idea", 2, 0);                                                  // * Given there is the "Seed Idea" idea at level 2 and 0 XP.
        context.givenThereAreNStacksOfNSCards(1, 5, "Berry");                                                           // * Given there are 1 stacks of 5 "Berry" cards.
        context.givenThereAreNStacksOfNSNSAndNSCards(1, 1, "Seed Idea", 1, "Villager", 1, "Pear");                      // * Given there are 1 stacks of 1 "Seed Idea", 1 "Villager", and 1 "Pear" cards.
        context.givenThereAreNSCards(0, "Pear Tree");                                                                   // * Given there are 0 "Pear Tree" cards.
        context.theSCardShouldHaveNInSTag("Pear", 1, "Seed");                                                           // * The "Pear" card should have 1 in "Seed" tag.
        context.theSCardDescriptionShouldSaySIsS("Pear", "Plant", "Pear Tree");                                         // * The "Pear" card description should say "Plant" is "Pear Tree".
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.endTheCurrentMoon();                                                                                    // * End the current moon.
        context.thereShouldBeNSCards(1, "Pear Tree");                                                                   // * There should be 1 "Pear Tree" cards.

        context.afterTest();
        testUtils.runWhenTestSuccessful();
    }

}
