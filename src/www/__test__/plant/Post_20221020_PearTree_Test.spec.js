import { runBeforeTestStarts, runWhenTestSuccessful } from "../util";
import { Post_20221020_PearTree_Context } from "./Post_20221020_PearTree_Context";

// !!! IMPORTANT !!!
// This test file is AUTOGENERATED by yarn create-tests
// If you need to update it, run yarn create-tests
// DO NOT MODIFY manually. Keep running yarn create-tests instead,
// while editing your posts.

test("2022-10-20_pear_tree.md", async () => {
  await runBeforeTestStarts(
    "2022-10-20_pear_tree",
    "108aecfae3f20120523e146cf98d0478"
  );

  const context = new Post_20221020_PearTree_Context();
  await context.beforeTest();

  // # Pear Tree                                                                                                           // # Pear Tree
  // ### How to obtain Pears from a Pear Tree                                                                              // ### How to obtain Pears from a Pear Tree
  await context.givenANewGame(); //                                                                                        // * Given a new game.
  await context.givenThereIsTheSIdea("Harvest Idea"); //                                                                   // * Given there is the "Harvest Idea" idea.
  await context.givenThereAreNSCards(1, "Pear"); //                                                                        // * Given there are 1 "Pear" cards.
  await context.givenThereAreNStacksOfNSNSAndNSCards(
    1,
    1,
    "Harvest Idea",
    1,
    "Villager",
    1,
    "Pear Tree"
  ); //              // * Given there are 1 stacks of 1 "Harvest Idea", 1 "Villager", and 1 "Pear Tree" cards.
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.thereShouldBeNStacksOfNSNSNSAndNSCards(
    1,
    1,
    "Harvest Idea",
    1,
    "Villager",
    1,
    "Pear Tree",
    2,
    "Pear"
  ); // // * There should be 1 stacks of 1 "Harvest Idea", 1 "Villager", 1 "Pear Tree", and 2 "Pear" cards.
  await context.theSCardDescriptionShouldSaySIsS("Pear Tree", "Fruit", "Pear"); //                                         // * The "Pear Tree" card description should say "Fruit" is "Pear".
  // ### How to obtain the Pear Tree                                                                                       // ### How to obtain the Pear Tree
  await context.givenANewGame(); //                                                                                        // * Given a new game.
  await context.givenThereIsTheSIdeaAtLevelNAndNXp("Seed Idea", 2, 0); //                                                  // * Given there is the "Seed Idea" idea at level 2 and 0 XP.
  await context.givenThereAreNStacksOfNSCards(1, 5, "Berry"); //                                                           // * Given there are 1 stacks of 5 "Berry" cards.
  await context.givenThereAreNStacksOfNSNSAndNSCards(
    1,
    1,
    "Seed Idea",
    1,
    "Villager",
    1,
    "Pear"
  ); //                      // * Given there are 1 stacks of 1 "Seed Idea", 1 "Villager", and 1 "Pear" cards.
  await context.givenThereAreNSCards(0, "Pear Tree"); //                                                                   // * Given there are 0 "Pear Tree" cards.
  await context.theSCardShouldHaveNInSTag("Pear", 1, "Seed"); //                                                           // * The "Pear" card should have 1 in "Seed" tag.
  await context.theSCardDescriptionShouldSaySIsS("Pear", "Plant", "Pear Tree"); //                                         // * The "Pear" card description should say "Plant" is "Pear Tree".
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.endTheCurrentMoon(); //                                                                                    // * End the current moon.
  await context.thereShouldBeNSCards(1, "Pear Tree"); //                                                                   // * There should be 1 "Pear Tree" cards.

  await context.afterTest();
  await runWhenTestSuccessful();
});
