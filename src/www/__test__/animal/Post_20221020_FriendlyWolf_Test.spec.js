import { runBeforeTestStarts, runWhenTestSuccessful } from "../util";
import { Post_20221020_FriendlyWolf_Context } from "./Post_20221020_FriendlyWolf_Context";

// !!! IMPORTANT !!!
// This test file is AUTOGENERATED by yarn create-tests
// If you need to update it, run yarn create-tests
// DO NOT MODIFY manually. Keep running yarn create-tests instead,
// while editing your posts.

test("2022-10-20_friendly_wolf.md", async () => {
  await runBeforeTestStarts(
    "animal/2022-10-20_friendly_wolf",
    "f7d4eb1fc14cfc30caf8c87cb1e9dc81"
  );

  const context = new Post_20221020_FriendlyWolf_Context();
  await context.beforeTest();

  // # Friendly Wolf!                                                                       // # Friendly Wolf!

  // ## How to turn a wolf into a friendly wolf?                                            // ## How to turn a wolf into a friendly wolf?
  await context.givenAStackOfNSNSAndNS(1, "Wolf", 1, "Villager", 1, "Bone"); //             // * Given a stack of 1 "Wolf", 1 "Villager" and 1 "Bone".
  await context.givenThatTheOddsAreThatWeWillGetASFromTheSCard(
    "Friendly Wolf",
    "Wolf"
  ); // // * Given that the odds are that we will get a "Friendly Wolf" from the "Wolf" card.
  await context.endTheCurrentMoon(); //                                                     // * End the current moon.
  await context.thereShouldBeNSCard(0, "Wolf"); //                                          // * There should be 0 "Wolf" card.
  await context.thereShouldBeNSCard(0, "Bone"); //                                          // * There should be 0 "Bone" card.
  await context.thereShouldBeNStackOfNSAndNS(
    1,
    1,
    "Villager",
    1,
    "Friendly Wolf"
  ); //      // * There should be 1 stack of 1 "Villager" and 1 "Friendly Wolf"

  await context.afterTest();
  await runWhenTestSuccessful();
});
