import { runBeforeTestStarts, runWhenTestSuccessful } from "../../util";
import { Post_20220721_MoreDetailsAboutHowVillagersEatFood_Context } from "./Post_20220721_MoreDetailsAboutHowVillagersEatFood_Context";

// !!! IMPORTANT !!!
// This test file is AUTOGENERATED by yarn create-tests
// If you need to update it, run yarn create-tests
// DO NOT MODIFY manually. Keep running yarn create-tests instead,
// while editing your posts.

test("2022-07-21_more_details_about_how_villagers_eat_food.md", async () => {
  await runBeforeTestStarts(
    "2022-07-21_more_details_about_how_villagers_eat_food",
    "92938c3817346519d734536a310bb0c7"
  );

  const context =
    new Post_20220721_MoreDetailsAboutHowVillagersEatFood_Context();
  await context.beforeTest();

  // # More Details About How Villagers Eat Food                                         // # More Details About How Villagers Eat Food

  // ## More kinds of villagers                                                          // ## More kinds of villagers
  await context.givenThereAreNSAndNSCards(1, "Villager", 1, "Militia"); //               // * Given there are 1 "Villager" and 1 "Militia" cards.
  await context.theSCardShouldHaveNInSTag("Villager", 1, "Eats"); //                     // * The "Villager" card should have 1 in "Eats" tag.
  await context.theSCardShouldHaveNInSTag("Militia", 2, "Eats"); //                      // * The "Militia" card should have 2 in "Eats" tag.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.

  // ## More kinds of food                                                               // ## More kinds of food
  await context.givenThereAreNSAndNSCards(1, "Berry", 1, "Apple"); //                    // * Given there are 1 "Berry" and 1 "Apple" cards.
  await context.theSCardShouldHaveNInSTag("Berry", 1, "Food"); //                        // * The "Berry" card should have 1 in "Food" tag.
  await context.theSCardShouldHaveNInSTag("Apple", 2, "Food"); //                        // * The "Apple" card should have 2 in "Food" tag.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 3); //                            // * The sum of all "Food" tags value should be 3.

  // ## Eating                                                                           // ## Eating
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 0); //                            // * The sum of all "Food" tags value should be 0.

  // ## Too much food                                                                    // ## Too much food
  await context.givenThereAreNSAndNSCards(4, "Berry", 0, "Apple"); //                    // * Given there are 4 "Berry" and 0 "Apple" cards.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 4); //                            // * The sum of all "Food" tags value should be 4.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 1); //                            // * The sum of all "Food" tags value should be 1.
  await context.thereShouldBeNSCards(1, "Berry"); //                                     // * There should be 1 "Berry" cards.
  await context.givenThereAreNSAndNSCards(0, "Berry", 2, "Apple"); //                    // * Given there are 0 "Berry" and 2 "Apple" cards.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 4); //                            // * The sum of all "Food" tags value should be 4.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 3); //                            // * The sum of all "Eats" tags value should be 3.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 0); //                            // * The sum of all "Food" tags value should be 0.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Too few food                                                                     // ## Too few food
  await context.givenThereAreNSAndNSCards(0, "Villager", 2, "Militia"); //               // * Given there are 0 "Villager" and 2 "Militia" cards.
  await context.givenThereAreNSAndNSCards(3, "Berry", 0, "Apple"); //                    // * Given there are 3 "Berry" and 0 "Apple" cards.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 4); //                            // * The sum of all "Eats" tags value should be 4.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 3); //                            // * The sum of all "Food" tags value should be 3.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.theSumOfAllSTagsValueShouldBeN("Eats", 2); //                            // * The sum of all "Eats" tags value should be 2.
  await context.theSumOfAllSTagsValueShouldBeN("Food", 1); //                            // * The sum of all "Food" tags value should be 1.
  await context.thereShouldBeNSCards(1, "Militia"); //                                   // * There should be 1 "Militia" cards.
  await context.thereShouldBeNSCards(1, "Berry"); //                                     // * There should be 1 "Berry" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 1          | 0        | 1        | 0       | 0              | 0             | // ### | 1          | 0        | 1        | 0       | 0              | 0             |
  await context.givenThereAreNSAndNSCards(1, "Villager", 0, "Militia"); //               // * Given there are 1 "Villager" and 0 "Militia" cards.
  await context.givenThereAreNSAndNSCards(1, "Berry", 0, "Apple"); //                    // * Given there are 1 "Berry" and 0 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(0, "Berry"); //                                     // * There should be 0 "Berry" cards.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 1          | 0        | 0        | 1       | 0              | 0             | // ### | 1          | 0        | 0        | 1       | 0              | 0             |
  await context.givenThereAreNSAndNSCards(1, "Villager", 0, "Militia"); //               // * Given there are 1 "Villager" and 0 "Militia" cards.
  await context.givenThereAreNSAndNSCards(0, "Berry", 1, "Apple"); //                    // * Given there are 0 "Berry" and 1 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(0, "Berry"); //                                     // * There should be 0 "Berry" cards.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 1          | 0        | 1        | 1       | 0              | 1             | // ### | 1          | 0        | 1        | 1       | 0              | 1             |
  await context.givenThereAreNSAndNSCards(1, "Villager", 0, "Militia"); //               // * Given there are 1 "Villager" and 0 "Militia" cards.
  await context.givenThereAreNSAndNSCards(1, "Berry", 1, "Apple"); //                    // * Given there are 1 "Berry" and 1 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(0, "Berry"); //                                     // * There should be 0 "Berry" cards.
  await context.thereShouldBeNSCards(1, "Apple"); //                                     // * There should be 1 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 0          | 1        | 2        | 0       | 0              | 0             | // ### | 0          | 1        | 2        | 0       | 0              | 0             |
  await context.givenThereAreNSAndNSCards(0, "Villager", 1, "Militia"); //               // * Given there are 0 "Villager" and 1 "Militia" cards.
  await context.givenThereAreNSAndNSCards(2, "Berry", 0, "Apple"); //                    // * Given there are 2 "Berry" and 0 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(0, "Berry"); //                                     // * There should be 0 "Berry" cards.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 0          | 1        | 0        | 1       | 0              | 0             | // ### | 0          | 1        | 0        | 1       | 0              | 0             |
  await context.givenThereAreNSAndNSCards(0, "Villager", 1, "Militia"); //               // * Given there are 0 "Villager" and 1 "Militia" cards.
  await context.givenThereAreNSAndNSCards(0, "Berry", 1, "Apple"); //                    // * Given there are 0 "Berry" and 1 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(0, "Berry"); //                                     // * There should be 0 "Berry" cards.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 0          | 1        | 2        | 1       | 2              | 0             | // ### | 0          | 1        | 2        | 1       | 2              | 0             |
  await context.givenThereAreNSAndNSCards(0, "Villager", 1, "Militia"); //               // * Given there are 0 "Villager" and 1 "Militia" cards.
  await context.givenThereAreNSAndNSCards(2, "Berry", 1, "Apple"); //                    // * Given there are 2 "Berry" and 1 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(2, "Berry"); //                                     // * There should be 2 "Berry" cards.
  await context.thereShouldBeNSCards(0, "Apple"); //                                     // * There should be 0 "Apple" cards.

  // ## Choosing what to eat                                                             // ## Choosing what to eat
  // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples | // ### | $Villagers | $Militia | $Berries | $Apples | $ResultBerries | $ResultApples |
  // ### |------------|----------|----------|---------|----------------|---------------| // ### |------------|----------|----------|---------|----------------|---------------|
  // ### | 1          | 1        | 2        | 2       | 1              | 1             | // ### | 1          | 1        | 2        | 2       | 1              | 1             |
  await context.givenThereAreNSAndNSCards(1, "Villager", 1, "Militia"); //               // * Given there are 1 "Villager" and 1 "Militia" cards.
  await context.givenThereAreNSAndNSCards(2, "Berry", 2, "Apple"); //                    // * Given there are 2 "Berry" and 2 "Apple" cards.
  await context.endTheCurrentMoon(); //                                                  // * End the current moon.
  await context.thereShouldBeNSCards(1, "Berry"); //                                     // * There should be 1 "Berry" cards.
  await context.thereShouldBeNSCards(1, "Apple"); //                                     // * There should be 1 "Apple" cards.

  await context.afterTest();
  await runWhenTestSuccessful();
});
